plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.0"
    id("com.gradleup.shadow") version "8.3.0"
}

group = 'com.mkikets'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }

    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    //implementation("com.saicone.rtag:rtag:1.5.5")
    // Other modules
    //implementation("com.saicone.rtag:rtag-block:1.5.5")
    //implementation("com.saicone.rtag:rtag-entity:1.5.5")
    //implementation("com.saicone.rtag:rtag-item:1.5.5")
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")
    implementation("de.tr7zw:item-nbt-api:2.13.2")
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.jar {
    manifest {
        attributes["paperweight-mappings-namespace"] = "mojang"
    }
}


processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks {
    jar {
        dependsOn(tasks.shadowJar)
    }

    shadowJar {
        // Relocate rtag (DO NOT IGNORE THIS)

        //relocate("com.saicone.rtag", "${project.group}.libs.rtag")
        relocate("de.tr7zw.changeme.nbtapi", "${project.group}.libs.nbtapi")
        // Exclude unused classes (optional)
        minimize()
    }
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.1")
    }
}